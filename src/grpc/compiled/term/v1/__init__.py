# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: term.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Term(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    definition: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListResponse(betterproto.Message):
    items: List["Term"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CreateRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    definition: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    definition: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DeleteRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DeleteResponse(betterproto.Message):
    ok: bool = betterproto.bool_field(1)


class TermServiceStub(betterproto.ServiceStub):
    async def list(self) -> "ListResponse":

        request = ListRequest()

        return await self._unary_unary(
            "/term.v1.TermService/List", request, ListResponse
        )

    async def get(self, *, id: int = 0) -> "Term":

        request = GetRequest()
        request.id = id

        return await self._unary_unary("/term.v1.TermService/Get", request, Term)

    async def create(self, *, name: str = "", definition: str = "") -> "Term":

        request = CreateRequest()
        request.name = name
        request.definition = definition

        return await self._unary_unary("/term.v1.TermService/Create", request, Term)

    async def update(
        self, *, id: int = 0, name: str = "", definition: str = ""
    ) -> "Term":

        request = UpdateRequest()
        request.id = id
        request.name = name
        request.definition = definition

        return await self._unary_unary("/term.v1.TermService/Update", request, Term)

    async def delete(self, *, id: int = 0) -> "DeleteResponse":

        request = DeleteRequest()
        request.id = id

        return await self._unary_unary(
            "/term.v1.TermService/Delete", request, DeleteResponse
        )


class TermServiceBase(ServiceBase):

    async def list(self) -> "ListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(self, id: int) -> "Term":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create(self, name: str, definition: str) -> "Term":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update(self, id: int, name: str, definition: str) -> "Term":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(self, id: int) -> "DeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.get(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_create(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "name": request.name,
            "definition": request.definition,
        }

        response = await self.create(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
            "name": request.name,
            "definition": request.definition,
        }

        response = await self.update(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.delete(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/term.v1.TermService/List": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRequest,
                ListResponse,
            ),
            "/term.v1.TermService/Get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRequest,
                Term,
            ),
            "/term.v1.TermService/Create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRequest,
                Term,
            ),
            "/term.v1.TermService/Update": grpclib.const.Handler(
                self.__rpc_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRequest,
                Term,
            ),
            "/term.v1.TermService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRequest,
                DeleteResponse,
            ),
        }
